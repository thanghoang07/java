<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>N4JS: Automated rename refactoring in N4JS IDE</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-2530662466762609742</guid>
	<link>https://n4js.blogspot.com/2019/03/automated-rename-refactoring-in-n4js.html</link>
	<description>Refactoring is probably one of the most important tools for us, software developers since we constantly need to change the structure of the code to improve the code quality or to prepare the code for new features etc. The most used refactoring operation is arguably &lt;b&gt;&lt;i&gt;rename refactoring&lt;/i&gt;&lt;/b&gt;. Find and replace could be used for renaming but the risk of renaming unrelated names is pretty high.&lt;br /&gt;&lt;br /&gt;N4JS IDE provides a powerful way of automatically renaming a definition and all its references with a comparable user experience as rename refactoring of Eclipse Java Development Tool (JDT).  The slogan is: &lt;i&gt;I want to rename this thing, do it for me however you like but please in a safe manner so that I can move on! &lt;/i&gt;This will exactly be your experience with rename refactoring in N4JS IDE.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;b&gt;Simple rename example&lt;/b&gt;&lt;/h3&gt;Let's have look at a simple example to see how rename refactoring works in N4JS IDE in action. Assume that we have an N4JS file with the following content.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-PzJHzyKNMWo/XJTEE071AaI/AAAAAAAAAGY/Qk9KvQbtCbksypaUt-GtCB4K7HJmKR0LwCLcBGAs/s1600/rename_refactoring_simple_example.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;434&quot; src=&quot;https://1.bp.blogspot.com/-PzJHzyKNMWo/XJTEE071AaI/AAAAAAAAAGY/Qk9KvQbtCbksypaUt-GtCB4K7HJmKR0LwCLcBGAs/s640/rename_refactoring_simple_example.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;When the cursor is at &lt;span&gt;A&lt;/span&gt; of the constructor &lt;span&gt;new A()&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;and we press Cmd + Shift + R to rename A to B, the rename refactoring suggests that it would rename A to B at 3 different locations. After entering the new name B and pressing enter, the class A and all its usages are renamed to B, fully automatically :-)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Name conflicts detection &lt;/h3&gt;Renaming an element may cause name conflicts. The rename refactoring in N4JS IDE provides comprehensive checks for detecting name conflicts. If the new name would cause name conflicts, the rename refactoring is disallowed.&lt;br /&gt;&lt;br /&gt;In the example above,  renaming class A to class C would cause a name conflict because in the script scope the name C already exists. The rename refactoring provided by N4JS IDE can recognize this conflict and shows an error message.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-9Um8f1tJZjo/XJS9OAQQx9I/AAAAAAAAAF4/GDRqLJkdf68TvRXI1Uh8SnxJVRSiXe_WACLcBGAs/s1600/rename_refactoring_name_conflict.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;434&quot; src=&quot;https://3.bp.blogspot.com/-9Um8f1tJZjo/XJS9OAQQx9I/AAAAAAAAAF4/GDRqLJkdf68TvRXI1Uh8SnxJVRSiXe_WACLcBGAs/s640/rename_refactoring_name_conflict.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;In a large code base, these checks are a true life saver. Imagine having to manually verify these kinds of name conflicts across hundred of files.&lt;br /&gt;&lt;br /&gt;Additionally, N4JS IDE's rename refactoring is capable of recognizing name conflicts when renaming&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;members of classifier&lt;/li&gt;&lt;li&gt;formal parameters of a function or method&lt;/li&gt;&lt;li&gt;field of a structural type&lt;/li&gt;&lt;li&gt;enum literal&lt;/li&gt;&lt;li&gt;local variable, constant&lt;/li&gt;&lt;li&gt;global variable, constant&lt;/li&gt;&lt;li&gt;etc.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;Rename composed members&lt;/h3&gt;&lt;div&gt;N4JS language supports composed elements. Renaming a composed element is somewhat special.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-P0YhiNxSaXg/XJTGIG9zjOI/AAAAAAAAAGk/jMMhWWSTudELAj8wUaKcge9-GpzhY664gCLcBGAs/s1600/rename_refactoring_composed_member.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;432&quot; src=&quot;https://3.bp.blogspot.com/-P0YhiNxSaXg/XJTGIG9zjOI/AAAAAAAAAGk/jMMhWWSTudELAj8wUaKcge9-GpzhY664gCLcBGAs/s640/rename_refactoring_composed_member.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;In this example, &lt;span&gt;ab.foo&lt;/span&gt; is a composed member because &lt;span&gt;ab&lt;/span&gt; is of the intersection type &lt;span&gt;A &amp;amp; B&lt;/span&gt; which is composed of both &lt;span&gt;A&lt;/span&gt; and &lt;span&gt;B&lt;/span&gt;. Renaming &lt;span&gt;ab.foo&lt;/span&gt; would rename all the definitions that contribute to the creation of &lt;span&gt;ab.foo&lt;/span&gt; as well as all references of these definitions.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Preview of changes&lt;/h3&gt;&lt;div&gt;When you start rename refactoring operation, you have the possibility to see the preview of changes before actually executing the operation.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-Qi2uX2F0rcA/XJTDElT6y6I/AAAAAAAAAGQ/cV3fX_tcotkzgidh11UV4Z2RK4oMelXLACLcBGAs/s1600/rename_refactoring_preview.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;434&quot; src=&quot;https://3.bp.blogspot.com/-Qi2uX2F0rcA/XJTDElT6y6I/AAAAAAAAAGQ/cV3fX_tcotkzgidh11UV4Z2RK4oMelXLACLcBGAs/s640/rename_refactoring_preview.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Note that the preview shows the changes in each file in a very recognizable manner.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Undo changes&lt;/h3&gt;&lt;div&gt;After the rename refactoring, if you feel regret and would like to undo the operation, simply press Cmd + Z. The undo will undo all the changes in affected files previously done by the rename refactoring.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Current limitations&lt;/h3&gt;&lt;div&gt;As the time of this writing, the rename refactoring in N4JS IDE still has several limitations:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Renaming alias is not supported&lt;/li&gt;&lt;li&gt;Checking name conflicts do not take into account shadowing&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;By Minh Quang Tran&lt;/div&gt;</description>
	<pubDate>Fri, 22 Mar 2019 11:50:41 +0000</pubDate>
	<author>noreply@blogger.com (Project N4JS)</author>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.20.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40960</guid>
	<link>https://eclipsesource.com/blogs/2019/03/21/emf-forms-and-emf-client-platform-1-20-0-released/</link>
	<description>&lt;p&gt;We are happy to announce that with the Eclipse Release 2018-03, we have also shipped  EMF Forms and EMF Client Platform...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2019/03/21/emf-forms-and-emf-client-platform-1-20-0-released/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms and EMF Client Platform 1.20.0 released!&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 21 Mar 2019 16:06:10 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.13 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink187</guid>
	<link>http://eclipse.org/webtools/releases/3.13</link>
	<description>&lt;div&gt;
		The Eclipse Web Tools Platform 3.13 has been released!
		&lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt;
		and updates can be performed using the
		Eclipse IDE 2019-03
		&lt;a href=&quot;http://download.eclipse.org/releases/2019-03/&quot;&gt;Update Site&lt;/a&gt;
		or through the
		&lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;
		.
		Release 3.13 is included in the 2019-03
		&lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2019-03/r/eclipse-ide-enterprise-java-developers&quot;&gt;
			Eclipse IDE for Enterprise Java Developers
		&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2019-03/r/eclipse-ide-javascript-and-web-developers&quot;&gt;Eclipse IDE for JavaScript and Web Developers&lt;/a&gt;
		, with selected portions also included in 8
		&lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;
		. Adopters can download
		&lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.13 update site itself&lt;/a&gt;
		directly and combine it with the necessary dependencies.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink187&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 20 Mar 2019 23:35:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Progress and Release Reviews</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5543</guid>
	<link>https://waynebeaton.wordpress.com/2019/03/19/progress-and-release-reviews/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) requires that a project team engage in a successful progress or release review before creating a formal release. &lt;span&gt;We use&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release-review&quot;&gt;progress and release reviews&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;as an opportunity to validate that a project team is following the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#2_1_Open_Source_Rules_of_Engagement&quot;&gt;open source rules of engagement&lt;/a&gt;, and are consistently implementing the EDP and the Eclipse&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Intellectual Property (IP) Policy&lt;/a&gt;&lt;span&gt;. &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Progress and release reviews are fundamentally the same, differing only in timing and intent. A progress review can occur at any time in the development cycle, and there is no immediate expectation that the project team will make a release. In contrast, a release review generally occurs at the end of a release cycle and it is&lt;/span&gt;&lt;span&gt; generally expected that a release occurs &lt;/span&gt;&lt;em&gt;shortly&lt;/em&gt;&lt;span&gt; after the successful completion of the review (though the EDP makes no timing requirements other than that a release review complete successfully before the release). &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screenshot from 2019-03-18 15-45-37.png&quot; class=&quot; size-full wp-image-5550 aligncenter&quot; height=&quot;299&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/screenshot-from-2019-03-18-15-45-37.png?w=640&amp;amp;h=299&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Following a successful progress or release review, a project team may&lt;/span&gt;&lt;span&gt; engage in any number of releases for an entire year (though, the project leadership may compel a project team to engage in extra reviews should they be deemed necessary). &lt;/span&gt;&lt;span&gt;While a formal review is not required for every release, project teams must ensure that all related&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip&quot;&gt;due diligence&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is completed before IP is included in a release. &lt;/span&gt;&lt;span&gt;Project teams are required to implement the IP Policy at all times.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The basic framework is the same, but the requirements are a little different for open source projects engaged in specification development (what the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) refers to as “Specification Projects”). These projects must engage in at least one successful progress review midway through their development cycle, and a successful release review prior to &lt;em&gt;every&lt;/em&gt; official release. For specification projects, reviews come with extra requirements to validate that that specification process is being consistently implemented, and that the work being done by the project is in scope.&lt;/p&gt;
&lt;p&gt;To start a review, a project team assembles review materials and delivers them to their &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#4_6_1_PMC&quot;&gt;Project Management Committee&lt;/a&gt; (PMC) for approval. In parallel, the project team also submits their log of intellectual property contributions to the Eclipse IP Team for their approval. One those approvals have been obtained, the Eclipse Management Organization (EMO) schedules the review and invites the community at large to weigh in.&lt;/p&gt;
&lt;p&gt;The EDP requires that review materials be made available to the community for feedback for a minimum of one week. Theoretically, it is during this time that a community member might voice concerns. An Eclipse Foundation member company might, for example, object to a release that they believe infringes on their intellectual property. I say “theoretically”, because this rarely happens… reviews tend to conclude successfully.&lt;/p&gt;
&lt;p&gt;Reviews tend to conclude successfully in large part &lt;span&gt;because all of the work is done in accordance with the open source rules of engagement.&lt;/span&gt;&lt;span&gt; Frankly, o&lt;/span&gt;ne week is far too short a period of time for a community member, adopter, or other interested party to engage in any sort of comprehensive review. It is helpful to think of progress and release reviews as the end of a review cycle that begins at the start of the development cycle. Since all open source work must be done in an open and transparent manner, anybody may observe the activity of the project team, and join in the conversation at any time. An interested individual or organization can literally engage with the project as long in advance of a review and/or release as they’d like.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In short, if you’re just starting to dig into an open source project during a review, you’ve waited too long.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The release process is described in detail in the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release&quot;&gt;Eclipse Project Handbook&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 19 Mar 2019 16:36:28 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: How to participate in advancing Jakarta EE Specification</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6681 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/how-participate-advancing-jakarta-ee-specification</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-RJUHEiTKNyuHlMqrNX3WVVPAc8UmO2d9s0rhRGkP4wvhFx9cTSH0CSPlwSApS5mGQmT1k5DWmmLyaC394jcHZ1MQ7Lvsq6QTRYXCYT31Hc6E4DfrJPa-9ZFnNUjiFHzvZdUjigB&quot; style=&quot;height: 219px; width: 624px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;It is March already, and excitement for Jakarta EE is growing. The migration to Jakarta EE is almost complete! In the wake of the successful launch of the Java EE 8-compatible Eclipse GlassFish 5.1 in January, we are keeping our sights set firmly forward. We will continue to work towards the full transition from Java EE and JCP to Jakarta EE and the new specification process. All projects related to Jakarta EE will need to be examined and established into new Eclipse Foundation Specification projects, but it’s important that we agree on specifications and project names and ensure each has a well-documented project scope before we can begin advancing the specifications.&lt;/p&gt;

&lt;p&gt;Yes, it’s set to be another busy year for the Eclipse Foundation. Having welcomed aboard new specification proposals such as Jakarta EE NoSQL and Jakarta Batch, we’re going to need all hands on deck! I’ve created this blog post with the aim of making it easier for individuals to contribute to the Jakarta EE Specification.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt; The Scope of the Work&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;All of this can be daunting for people who are just starting to take interest in Jakarta EE and open source, but everyone can contribute in some easy ways to streamline the ongoing transition and advancement of the technology. If you are wondering what you can do to participate, this blog series will outline some areas where involvement is needed. I will group the work in the three major groups:&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Marketing&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Technical&lt;/p&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Collateral&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;In the next couple of weeks, please expect more details on each.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Committer and Contributors  paperwork&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Before you start the work please ensure all agreements are executed&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Contributors:&lt;/p&gt;

	&lt;ul&gt;
		&lt;li dir=&quot;ltr&quot;&gt;
		&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/legal/ECA.php&quot;&gt;Eclipse Contributor Agreement&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;p dir=&quot;ltr&quot;&gt;Committers:&lt;/p&gt;

	&lt;ul&gt;
		&lt;li dir=&quot;ltr&quot;&gt;
		&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/org/documents/eclipse_membership_agreement.pdf&quot;&gt;Eclipse Foundation Membership Agreement&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
		&lt;li dir=&quot;ltr&quot;&gt;
		&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/legal/#CommitterAgreements&quot;&gt;Member Committer and Contributor Agreement&lt;/a&gt; or &lt;a href=&quot;https://www.eclipse.org/legal/committer_process/EclipseIndividualCommitterAgreement.pdf&quot;&gt;Individual Committer Agreement&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
		&lt;li dir=&quot;ltr&quot;&gt;
		&lt;p dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/IWG_Participation_Agreement.pdf&quot;&gt;Working Group Participation Agreement&lt;/a&gt;&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee&quot;&gt;#JakartaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/participate&quot;&gt;#Participate&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/opensource&quot;&gt;#OpenSource&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/javaee&quot;&gt;#JavaEE&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 18 Mar 2019 16:04:32 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Incubation in the Eclipse Development Process</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/35IWfgzH8M0/incubation-eclipse-development-process</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/35IWfgzH8M0/incubation-eclipse-development-process</link>
	<description>The Eclipse Development Process has a notion of phases. Two of those phases are Incubation and Mature.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/35IWfgzH8M0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 15 Mar 2019 20:30:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Incubation in the Eclipse Development Process</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5545</guid>
	<link>https://waynebeaton.wordpress.com/2019/03/15/incubation-in-the-eclipse-development-process/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Development Process&lt;/a&gt; has a notion of phases. Two of those phases are &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_3_Incubation&quot;&gt;Incubation&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_4_Mature&quot;&gt;Mature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While in both of these phases, an Eclipse open source project operates in basically the same manner: only committers can push content, committers are brought on board by election, committers accept contributions, and projects in the incubation phase can issue major, minor, and service releases. In fact, we strongly encourage all new project teams to engage in at least one release while in the incubation phase as part of learning our process. Traditionally, a project in the incubation phase numbers their releases &amp;lt; 1.0 (e.g. “0.7”), but there is no requirement to do so.&lt;/p&gt;
&lt;p&gt;Incubation is a phase, or state, for a project. That a project is in the incubation phase (we oftentimes refer to a project in this phase as “incubating”) is a flag for adopters and the community at large that the project team is still learning the various processes that Eclipse project teams follow, or that the content produced is either unstable or volatile (e.g. APIs are likely to change while a project is in incubation). Note my use of the word “or” in the previous sentence: a project with a stable code base that has just moved to the Eclipse Foundation (with committers who are new to our process) starts in incubation.&lt;/p&gt;
&lt;p&gt;To highlight that a project is in the incubation phase, it must implement &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#starting-project-phases&quot;&gt;incubation branding&lt;/a&gt;. Primarily, this takes the form of displaying the incubation logo in prominent locations, including the project’s major web properties and including the word “incubation” or warning that products shipped as part of a release “may include incubating components”.&lt;/p&gt;
&lt;p&gt;For those readers who are already familiar with our incubating branding, you’ll hopefully be delighted to learn that we’ve &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=429305&quot;&gt;selected a logo&lt;/a&gt; to replace the venerable old “incubation egg” and will be rolling it out soon (while these sorts of things tend to be a team effort, we give credit to &lt;a href=&quot;https://twitter.com/stephaniejswart&quot;&gt;@stephaniejswart&lt;/a&gt; for bringing this new logo to life).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;eclipse_incubation_vertical_png-02.png&quot; class=&quot;alignnone  wp-image-5546 aligncenter&quot; height=&quot;221&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/eclipse_incubation_vertical_png-02.png?w=169&amp;amp;h=221&quot; width=&quot;169&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The IP process provides some additional flexibility for projects in incubation; the implication being that there may be some modest increase in intellectual property-related risk (especially when combined with a new development team who don’t yet live and breath the &lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Eclipse IP Policy&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To leave incubation, a project team must engage in a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release-graduation&quot;&gt;graduation review&lt;/a&gt; (graduation reviews are typically combined with a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release-review&quot;&gt;progress or release review&lt;/a&gt;). During that review, the project team must demonstrate that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The project team understands and implements the EDP and  and related processes, and understands their obligations under the Eclipse IP Policy;&lt;/li&gt;
&lt;li&gt;The APIs are stable; and&lt;/li&gt;
&lt;li&gt;The content produced is of “Eclipse Quality”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, this takes the form of a few extra sentences in the documentation associated with the review (after, of course, actually learning the ropes and stabilizing the content quality).&lt;/p&gt;</description>
	<pubDate>Fri, 15 Mar 2019 16:33:01 +0000</pubDate>
</item>
<item>
	<title>itemis: Eclipse Xtext goes shopping - The new Bill of Materials</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/eclipse-xtext-goes-shopping-the-new-bill-of-materials</guid>
	<link>https://blogs.itemis.com/en/eclipse-xtext-goes-shopping-the-new-bill-of-materials</link>
	<description>&lt;p&gt;With the new 2.17 version, Xtext starts shipping a new artifact: A Maven &lt;em&gt;Bill of Materials (a.k.a. BOM)&lt;/em&gt;. Learn about our motivation and how your projects can benefit from it.&lt;/p&gt; 
&lt;p&gt;Right on the same date as the Eclipse Photon simultaneous release on June 27th 2018, Xtext users and especially users of &lt;em&gt;xtend-maven-plugin&lt;/em&gt; were unpleasantly &lt;a href=&quot;https://github.com/eclipse/xtext/issues/1231&quot;&gt;surprised by a suddenly arising SecurityException in their builds&lt;/a&gt;, which perfectly worked the day before. Since this broke quite some builds, including our own, analysis was immediately initiated.&lt;/p&gt; 
&lt;p&gt;On the same day, the problem was identified as a problem with the plugin’s dependencies. The plugin used version ranges, which left it to Maven’s dependency resolution mechanism to compute the actual versions of artifacts that are added to the plugin’s classpath realm. Unfortunately, this might result into resolving incompatible Eclipse core libraries. Luckily, dependencies of a Maven plugin can be overridden or extended by configuration, so users could help themselves using the instructions in the &lt;a href=&quot;https://github.com/eclipse/xtext/issues/1231#issuecomment-401125569&quot;&gt;issue comments&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Of course, we do not want users to implement workarounds, nor do we want to have any workarounds in Xtext’s code base. So streamlining dependencies was the logical task. &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management&quot;&gt;Maven’s dependency mechanism&lt;/a&gt; allows declaration of managed dependencies through a &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; section. The most common way is to declare such a section in a parent POM and inherit it from there. A less-known possibility is the &lt;em&gt;Bill of Materials&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;About Maven Bill of Materials and Xtext’s BOM&lt;/h2&gt; 
&lt;p&gt;A Maven BOM is basically a simple &lt;em&gt;pom.xml&lt;/em&gt; file with packaging type &lt;em&gt;pom&lt;/em&gt;, which in its core contains a &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; section. The Xtext BOM declares all third-party dependencies that Xtext uses in Maven or Gradle builds. To gain an overview of the used artifact versions on first sight, the BOM declares version properties and uses them in the managed dependencies below. Here's the contents of &lt;a href=&quot;https://github.com/eclipse/xtext-lib/blob/v2.17.0.M2/releng/org.eclipse.xtext.dev-bom/pom.xml&quot;&gt;Xtext’s BOM&lt;/a&gt;:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;project ...&amp;gt;
  &amp;lt;groupId&amp;gt;org.eclipse.xtext&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;xtext-dev-bom&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;[XTEXT_VERSION]&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;
  ...
  &amp;lt;properties&amp;gt;
  &amp;lt;!-- ======== --&amp;gt;
  &amp;lt;!-- Versions --&amp;gt;
  &amp;lt;!-- ======== --&amp;gt;
  &amp;lt;!-- 3rd party --&amp;gt;
  &amp;lt;antlr-runtime-version&amp;gt;3.2&amp;lt;/antlr-runtime-version&amp;gt;
  &amp;lt;args4j-version&amp;gt;2.33&amp;lt;/args4j-version&amp;gt;
  &amp;lt;asm-version&amp;gt;7.0&amp;lt;/asm-version&amp;gt;

  &amp;lt;error_prone_annotations-version&amp;gt;2.0.15&amp;lt;/error_prone_annotations-version&amp;gt;
  &amp;lt;guava-version&amp;gt;21.0&amp;lt;/guava-version&amp;gt;
  &amp;lt;guice-version&amp;gt;3.0&amp;lt;/guice-version&amp;gt;
  &amp;lt;icu4j-version&amp;gt;52.1&amp;lt;/icu4j-version&amp;gt;
  &amp;lt;javax.annotation-api-version&amp;gt;1.3.2&amp;lt;/javax.annotation-api-version&amp;gt;
  &amp;lt;jsr305-version&amp;gt;3.0.2&amp;lt;/jsr305-version&amp;gt;
  &amp;lt;junit-version&amp;gt;4.12&amp;lt;/junit-version&amp;gt;
  &amp;lt;junit5-version&amp;gt;5.1.0&amp;lt;/junit5-version&amp;gt;
  ...
  &amp;lt;/properties&amp;gt;
  &amp;lt;dependencyManagement&amp;gt;
  &amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;args4j&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;args4j&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${args4j-version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${jsr305-version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.google.errorprone&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;error_prone_annotations&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${error_prone_annotations-version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    ...
  &amp;lt;/dependencies&amp;gt;
  &amp;lt;/dependencyManagement&amp;gt;
&amp;lt;/project&amp;gt;&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h2&gt;Using the Xtext Bill of Materials&lt;/h2&gt; 
&lt;p&gt;To use the BOM, clients have to declare it as a dependency in their &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; section with scope &lt;em&gt;import:&lt;/em&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;dependencyManagement&amp;gt;
  &amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.eclipse.xtext&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;xtext-dev-bom&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${xtext.version}&amp;lt;/version&amp;gt;
    &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;Once this is done, all artifacts managed by the BOM can be used without needing to specify a version. For example, if clients want to use JUnit 5 dependencies, they simply declare their dependencies as follows. Please note: Specification of a scope different from the default is still needed. We may evaluate to declare also scopes, e.g., &lt;em&gt;test&lt;/em&gt;&lt;code&gt;&lt;/code&gt; for testing libraries, and exclusions for transitive dependencies, e.g., &lt;em&gt;log4j&lt;/em&gt;, in future versions.&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;junit-jupiter-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  ...
&amp;lt;/dependencies&amp;gt;&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;So, clients do no longer carefully revise each and every dependency, which thus lowers maintenance efforts. Also, clients can be sure that the managed versions of all libraries have been tested to work properly with Xtext and with each other. Of course, in the unlikely case of an incompatibility, clients still have the option to override BOM-managed dependencies by explicit versions.&lt;/p&gt; 
&lt;h2&gt;Using the BOM with Gradle&lt;/h2&gt; 
&lt;p&gt;Although a BOM is a Maven artifact, Gradle builds can also use it. First attempts to integrate BOMs for dependency management with Gradle have been done by the Spring framework with their &lt;a href=&quot;https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle&quot;&gt;dependency-management-plugin&lt;/a&gt;. Now, with Gradle 5, direct support of BOMs have been &lt;a href=&quot;https://docs.gradle.org/5.0/userguide/managing_transitive_dependencies.html#sec:bom_import&quot;&gt;added to the Gradle framework&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When we started exploring and using our BOM, we stumbled over some open bugs and incompatibilities, so we sticked with the Spring variant for 2.17.0.M1. But after upgrading to Gradle 5.2.1, things got easier for us and seem to be stable now. To use the Xtext BOM in Gradle builds, declare a &lt;em&gt;platform&lt;/em&gt; dependency:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;dependencies {
  compile platform(&quot;org.eclipse.xtext:xtext-dev-bom:${xtextVersion}&quot;)
}&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;As with Maven, it is not necessary to specify explicit versions if using dependencies that are managed within the BOM:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;dependencies {
  testCompile 'org.junit.jupiter:junit-jupiter-api'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine'
  ...
}&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h2&gt;A note on Guava&lt;/h2&gt; 
&lt;p&gt;With introduction of the BOM, we decided to pin all dependency versions. One important dependency here is the Google Guava library, which Xtext supported in the range from version 14.0 to 21.0, which has been pinned to 21.0 now.&lt;/p&gt; 
&lt;p&gt;As a positive side effect, build times could be reduced, since fewer dependency combinations have to be resolved and evaluated, especially for clients of &lt;em&gt;xtend-maven-plugin&lt;/em&gt;.&lt;/p&gt; 
&lt;h2&gt;New &amp;amp; existing projects&lt;/h2&gt; 
&lt;p&gt;As always, we polished Xtext’s &lt;em&gt;New Project Wizard&lt;/em&gt; to reflect the latest state of development. So, when you create new Xtext projects with the wizard for the build system of your choice, you can immediately benefit from using the BOM.&lt;/p&gt; 
&lt;p&gt;For existing projects, we recommend to refactor them, remove the &lt;a href=&quot;https://github.com/eclipse/xtext/issues/1231#issuecomment-401125569&quot;&gt;workaround&lt;/a&gt; mentioned above and get rid off any unnecessary dependency version. A freshly-created project can serve as a good blueprint for the changes you should apply.&lt;/p&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;The new Xtext BOM manages all third-party dependencies of Xtext. All existing code has been refactored to make use of the BOM, and it is recommended to upgrade your projects to do the same.&lt;/p&gt; 
&lt;p&gt;The BOM can be used from Maven and Gradle build configurations. It reduces maintenance efforts for upgrading Xtext projects and can speed up the build process slightly. Most importantly, there is no space for dependency problems if properly using managed dependencies.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Feclipse-xtext-goes-shopping-the-new-bill-of-materials&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 12 Mar 2019 15:00:00 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>Eclipse Announcements: That's A Wrap, Folks! Thank You for Participating in Our 2019 IoT Developer Survey!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/YpWWc_7xinc/thats-wrap-folks-thank-you-participating-our-2019-iot-developer-survey</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/YpWWc_7xinc/thats-wrap-folks-thank-you-participating-our-2019-iot-developer-survey</link>
	<description>We are proud to announce that our 2019 IoT Developer Survey, organized by the Eclipse IoT Working Group, was a huge success with over 1,700 responses!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/YpWWc_7xinc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 11 Mar 2019 18:40:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Specification Process Step-by-Step</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/CIFO137l5as/eclipse-foundation-specification-process-step-step</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/CIFO137l5as/eclipse-foundation-specification-process-step-step</link>
	<description>The Eclipse Foundation Specification Process (EFSP) provides a framework and governance model for developers engaged in the process of developing specifications.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/CIFO137l5as&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 08 Mar 2019 18:30:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process Step-by-Step</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5516</guid>
	<link>https://waynebeaton.wordpress.com/2019/03/08/eclipse-foundation-specification-process-step-by-step/</link>
	<description>&lt;p&gt;&lt;em&gt;Scientific progress goes “boink”? – Hobbes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) provides a framework and governance model for developers engaged in the process of developing specifications.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Specification&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: A specification is a collection of related artifacts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step1.png&quot; class=&quot;alignnone size-full wp-image-5541&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The EFSP defines a specification as a “collection of Application Programming Interface (API) definitions, descriptions of semantic behavior, data formats, protocols, and/or other referenced specifications, along with its TCK, intended to enable the development and testing of independent Compatible Implementations.” A specification project is, then, an Eclipse open source project concerned with the creation and maintenance of one or more specifications.&lt;/p&gt;
&lt;p&gt;As a matter of practice, we tend to have a one-to-one mapping between specification projects and specifications. But there are examples of specification projects that play host to multiple specifications. The &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jakartaee-stable&quot;&gt;Eclipse Project for Stable Jakarta EE APIs&lt;/a&gt;, for example, is the host project for a handful of specifications that are considered stable and in long term maintenance (and not expected to continue to evolve).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Specification Project&lt;/strong&gt;: A specification project is the composition of a team of committers dedicated to the creation and maintenance of one or more specifications, along with the resources required to create those specifications.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step.png&quot; class=&quot;alignnone size-full wp-image-5521&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-4.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Resources assigned to a specification project include one or more software repositories that serve as the collaboration point for the development of specification documents and corresponding technical artifacts. A specification project has other resources assigned to it, including space on a download server, build resources, and mailing lists.&lt;/p&gt;
&lt;p&gt;A specification project may also be responsible for other related functionality, including TCKs. It’s considered a best practice to keep implementations of a specification separate from the specification itself, but there is no rule that prevents this sort of coupling.&lt;/p&gt;
&lt;p&gt;A specification project has one or more project leads who are typically also committers. Project leads have no special powers or authority with regard to development and delivery of specifications. Rather, they are the primary liaison between the project team and the Eclipse Foundation, and form the first link in the leadership chain which includes the Project Management Committee (PMC) and Eclipse Management Organization (EMO). Primarily, project leads are responsible for ensuring that the project team (i.e. the committers) are following the rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Specification Versions&lt;/strong&gt;: A specification project produces versions of a specification, which the EFSP refers to as specification versions. Once ratified, a specification version becomes a final specification.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (1).png&quot; class=&quot;alignnone size-full wp-image-5522&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-1-1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The differences between a specification version and a final specification are subtle. A specification version is the output from the open source project. While a final build of a specification version can be said to be complete, it cannot be used as the basis for an implementation. The intellectual property rights that are required to implement a specification flow through the final specification (a bit more on this later).&lt;/p&gt;
&lt;p&gt;No specific packaging or means of distribution are prescribed by the EFSP, but one can think of a final specification as a complete package that combines a read-only version of the specification document, technical artifacts (e.g. APIs), a TCK, and one or more compatible implementations. Again, the EFSP makes no specific requirements regarding how everything is packaged, so, for example, the TCK and compatible implementations may manifest as pointers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Specification Project Persists&lt;/strong&gt;: A specification project is formed around the idea of producing and maintaining a specification in the general sense. The same specification project will produce multiple versions of a specification. After the final and complete version of a specification is released, the project team will begin the development cycle for the next release.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (2).png&quot; class=&quot;alignnone size-full wp-image-5523&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-2-1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Members of the team (i.e. the committers and project Leads) may come and go, but the team remains.&lt;/p&gt;
&lt;p&gt;A specification project has a well-defined scope that defines the boundaries of their activity. All versions of specifications produced by the project must fall within the scope.&lt;/p&gt;
&lt;p&gt;The EFSP does not prescribe how resources associated with specification projects are structured, beyond a requirement that the specification project must be the home for the specification document. For technologies like Java® that have technical artifacts (e.g. interfaces) it is convenient, but not necessary to have the source for those technical artifacts maintained as part of the project.&lt;/p&gt;
&lt;p&gt;Strictly speaking, a specification project can also be the home for a TCK and compatible implementation. As mentioned earlier, it is considered a best practice to keep compatible implementations separate (it may even be considered a bad practice to couple an implementation with the specification).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Project Management Committee&lt;/strong&gt;: Top-level projects are managed by a Project Management Committee (PMC). A PMC has one or more PMC leads and zero or more PMC members. Together the PMC provides oversight and overall leadership for the projects that fall under their top-level project.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (3).png&quot; class=&quot;alignnone size-full wp-image-5538&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-3-1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Under the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) open source projects are organized hierarchically. A special type of project, top-level Projects, sit at the top of the hierarchy. Every top-level project contains one or more projects (which are sometime referred to as “subprojects”). As a general rule, top-level projects are primarily an organizational construct, and all real work occurs in subprojects.&lt;/p&gt;
&lt;p&gt;Every top-level project has a PMC that supervises the projects under their purview to ensure that they are all working under the rules defined by the EDP, EFSP, and the Eclipse Foundation’s &lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Intellectual Property Policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Specification Committee&lt;/strong&gt;: A committee of a working group established to manage the EFSP for technologies within the scope of its working group.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step.png&quot; class=&quot;alignnone size-full wp-image-5539&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-6.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Open source projects are the means by which developers collaborate at the Eclipse Foundation. working groups are a means for companies to work together. The Jakarta EE Working Group, for example, brings companies together to collaborate on marketing, ecosystem development, governance, and (of course) open source software and specification development. As part of their governance activities, a working group must establish a specification committee to define and manage a specification process on behalf of the working group.&lt;/p&gt;
&lt;p&gt;The specification committee is responsible for ensuring that that the specification teams keep within their defined scope, and generally ensure that the specification versions created by the specification project are implementable and serve the purposes of the working group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overview of the Process&lt;/strong&gt;: the EFSP extends the EDP by adding a few extra checks and balances.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (5).png&quot; class=&quot;alignnone size-full wp-image-5524&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-5.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Each iteration through the development cycle starts with a plan. For the first iteration, the project proposal serves as the plan and the creation review as the approval.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Specification Project Proposal&lt;/strong&gt;: Specification projects start with a proposal.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (7).png&quot; class=&quot;alignnone size-full wp-image-5525&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-7.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A project proposal describes the specification project that will be created. Proposals set out the scope and provide a description of the project and the specifications that the project will produce.&lt;/p&gt;
&lt;p&gt;The Eclipse Foundation has a web form for defining project proposals. While a proposal is being drafted, the author and anybody designated as a project lead is able to edit the document. Everybody listed as an initial member of the specification team (i.e. committers) are able to view the document. The proposal becomes publicly accessible after it is opened for community review.&lt;/p&gt;
&lt;p&gt;According to the EDP, the proposal must be open for community review for a minimum of two weeks to provide the community and key stakeholders to provide feedback and improve the proposal. The proposal can be modified during the community review period.&lt;/p&gt;
&lt;p&gt;While open for community review, the EMO will investigate and approve trademarks associated with the project, which Eclipse Foundation holds on behalf of the project team and community. During this period the EMO will also work to get approval of other exceptions. This includes specification project licensing schemes that fall outside of the pre-approved licensing schemes for the top-level project.&lt;/p&gt;
&lt;p&gt;When everything is in place (trademarks, licensing approval when required, identification of a mentor, and the minimum two week community review), the EMO will schedule a creation review.&lt;/p&gt;
&lt;p&gt;Creation reviews run for a minimum of one week. The EMO schedules two review periods each month. Reviews are grouped together; they are scheduled according to their end dates which occur on the first and third Wednesdays of every month.&lt;/p&gt;
&lt;p&gt;The proposal is locked down during the creation review period and no changes are possible. The creation review period is the last opportunity for the community and stakeholders to provide feedback. The specification committee and the membership-at-large of the Eclipse Foundation can intervene with the creation process. The membership can, should they find cause, request that the EMO fail a creation review and require that the proposal author either make additional changes and restart the review process, or withdraw the proposal completely (for what it’s worth, this has never happened).&lt;/p&gt;
&lt;p&gt;Upon successful completion of the creation review, the Eclipse Foundation will engage in a provisioning process to turn the proposal into a live specification project. Provisioning starts with the authorization of committers which is initiated via email requests to all committers listed on the proposal to engage in our paperwork process. The provisioning process is kept on hold until the Eclipse Foundation’s records team has the necessary paperwork from at least one committer.&lt;/p&gt;
&lt;p&gt;The proposal document serves as the plan for the first development iteration. Subsequent iterations through the process rely on the creation of a release plan and plan review.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release Planning&lt;/strong&gt;: The project team assembles the plan for each release cycle.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (8).png&quot; class=&quot;alignnone size-full wp-image-5526&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-8.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Again, note that the proposal and creation review serve as the plan and plan review for the first release.&lt;/p&gt;
&lt;p&gt;The plan must be in-scope (i.e. all new work must fall within the bounds defined by the specification project’s scope) and must be developed in consideration of the concerns of stakeholders. It must, for example, take into consideration overarching plans of the PMC or associated working group. It’s worth noting that the concerns of the project team must also be taken into consideration when creating an overarching plan. We’re all in this together.&lt;/p&gt;
&lt;p&gt;The plan is delivered to the specification committee via a plan review. The specification committee must vote to approve: a two-thirds majority of positive votes are required to succeed. How the individual members of the specification committee decide to vote varies; but at a minimum, by voting yes, members affirm that they believe that the planned work fits within the project’s scope and that sufficient consultation with the community and stakeholders has occurred.&lt;/p&gt;
&lt;p&gt;All reviews, including plan reviews, run for a minimum of one week. They start with the delivery of review materials, and end with the conclusion of the voting period. For a plan review, materials include the plan itself along with a concise description (executive summary) of the plan. For progress and release reviews (which will be discussed shortly), the review materials include a milestone or release candidate build of the project content.&lt;/p&gt;
&lt;p&gt;All reviews are run in the open. In addition to the approvals that are required, reviews offer an opportunity for the community and adopters to make their concerns known. As the entire process is run in the open, reviews should be considered as a final opportunity to express concern: parties who have a stake or interest in a specification process should engage early and often via project-specific open channels.&lt;/p&gt;
&lt;p&gt;In the event that a review fails, the project team must regroup, incorporate feedback, and re-engage in a new review. The EFSP makes no requirement regarding the timing of re-engagement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Committers Develop Specifications&lt;/strong&gt;: Committers have the power and responsibility to push content into the specification project’s Git repositories. Committers hold most of the power and responsibility in the process.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (9).png&quot; class=&quot;alignnone size-full wp-image-5527&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-9.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Committer power must be used wisely. Committers have awesome power, but they also have awesome responsibility and are expected to work to the benefit of the community and ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Committers Accept Contributions&lt;/strong&gt;: Committers accept contributions from non-committers. In the GitHub world, this takes the form of committers reviewing and accepting pull requests.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (10).png&quot; class=&quot;alignnone size-full wp-image-5529&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-10.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Committers are responsible to ensure that the accepted content is within scope and release plan, and that the Eclipse Foundation’s Intellectual Property Policy is observed and the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip&quot;&gt;IP Due Diligence Process&lt;/a&gt; is followed.&lt;/p&gt;
&lt;p&gt;Contributors must sign the &lt;a href=&quot;https://www.eclipse.org/legal/ECA.php&quot;&gt;Eclipse Contributor Agreement&lt;/a&gt; (ECA).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technology Compatibility Kit (TCK)&lt;/strong&gt;: While the specification project committers are developing the specification resources, TCK project committers and contributors assemble the TCK.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (11).png&quot; class=&quot;alignnone size-full wp-image-5531&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-11-1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The EFSP does not make any requirements regarding where the TCK lives. It may be a part of the corresponding specification project, or it may be separate.&lt;/p&gt;
&lt;p&gt;When separate, a TCK project is a traditional Eclipse open source software project. Committers and contributors work on a Eclipse open source software project in much the same way they do on a specification project: committers can push directly to the project’s Git repositories, and must review and accept contributions from non-committer contributors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Produce Milestone Builds&lt;/strong&gt;: The project team will produce milestone builds.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (12).png&quot; class=&quot;alignnone size-full wp-image-5530&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-12.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A milestone build is a pre-release build of a version of the specification (“Specification Version”). Milestone builds are intended for a use only by a limited audience (generally the project team themselves, committers working on candidate compatible implementations, and other early adopters).&lt;/p&gt;
&lt;p&gt;All efforts should be undertaken to ensure that a milestone build is technically correct, though it may be incomplete. A compatible implementation cannot be based on a milestone build of a Specification.&lt;/p&gt;
&lt;p&gt;Later builds may be labeled as “release candidates”. For the purposes of the EFSP and EDP, the terms “release candidate” and “milestone’ are different only in intent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Progress Review&lt;/strong&gt;: The specification project team must engage in at least one progress review during their release cycle.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (13).png&quot; class=&quot;alignnone size-full wp-image-5532&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-13.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Progress reviews are a notion that is inherited from the EDP. The intent of a progress review is to ensure that the work is in-scope; that a project is making progress towards a release that will be approved; and that the EDP, EFSP, and Eclipse Foundation Intellectual Property Policy are being followed.&lt;/p&gt;
&lt;p&gt;The project’s record of intellectual property contributions (&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-iplog&quot;&gt;IP Log&lt;/a&gt;) must be submitted to the EMO for review and approval before engaging in the review. Supporting materials for a review, including a concise description (executive summary) of the progress made to-date and a milestone build of the project content must be submitted before the start of the one week (minimum) review period. The progress review must be approved by simple +1 from a PMC representative, and by positive two-thirds super-majority vote of the specification committee.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Implementing the Specification&lt;/b&gt;: While the specification project’s committers work on the specification content, other teams may work on implementing them.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (14).png&quot; class=&quot;alignnone size-full wp-image-5533&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-14.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;An implementation cannot be referred to as a compatible implementation until after the particular version of the specification is ratified and declared a final specification (and—of course—fulfills all of the requirements of the TCK associated with the final specification).&lt;/p&gt;
&lt;p&gt;The EFSP makes no requirement regarding timing. In a code-first world, the implementation may exist before the specification. In this hypothetical case, an implementation project’s team would instead make refinements to their implementation based on the work-in-progress. It’s expected that implementation teams will interact regularly (via open channels) with the specification project’s team to provide feedback and ask questions.&lt;/p&gt;
&lt;p&gt;In order to be declared final, a specification needs to have at least one compatible implementation that implements all aspects of the specification (including any optional parts) and released under one of the open source licenses listed in the EFSP (more below).&lt;/p&gt;
&lt;p&gt;This introduces a bit of a “chicken and egg” problem: we can’t have a final specification without a compatible implementation and we can’t have a compatible implementation without a final specification. The specification project, TCK project, and implementation teams need to work together so that at least one implementation will be available and complete in time to be officially released and declared a compatible implementation at the time the final specification is ratified.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release Review&lt;/strong&gt;: The specification project team must engage in a release review at the end of their release cycle.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (15).png&quot; class=&quot;alignnone size-full wp-image-5534&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-15.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At least one compatible implementation must be distributed under one of the open source licenses specified by the EFSP: EPL-2.0, EDL-1.0 (BSD-3-Clause), Apache-2.0.&lt;/p&gt;
&lt;p&gt;As is required for a progress review, the project’s record of intellectual property contributions (&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-iplog&quot;&gt;IP Log&lt;/a&gt;) must be submitted to the EMO for review and approval before engaging in the release review, the review must be approved by simple +1 from a PMC representative, and by positive two-thirds super-majority vote of the specification committee.&lt;/p&gt;
&lt;p&gt;Following a successful release review the specification version &lt;span title=&quot;boink&quot;&gt;transmogrifies&lt;/span&gt; into a final specification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Specification&lt;/strong&gt;: With the successful completion of a release review, including approval of the specification committee by a super-majority vote, a specification version is considered ratified and the associated artifacts are promoted and distributed by the specification committee as a final specification.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (16).png&quot; class=&quot;alignnone size-full wp-image-5535&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-16.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;All versions of specifications that are referenced by a ratified final specification must themselves be ratified. The release review for related specification versions may be run concurrently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Final Specification Licenses&lt;/strong&gt;: Final Specifications and their associated artifacts are distributed under specific licenses.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (17).png&quot; class=&quot;alignnone size-full wp-image-5536&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-17.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The Specification Document for the Final Specification must be distributed as read-only text under the &lt;a href=&quot;https://www.eclipse.org/legal/efsl.php&quot;&gt;Eclipse Foundation Specification License&lt;/a&gt;. The Ratified TCK in composite is distributed under the &lt;a href=&quot;https://www.eclipse.org/legal/tck.php&quot;&gt;Eclipse Foundation TCK License&lt;/a&gt;. Other technical artifacts must be distributed under an open source license (normally the specification project’s license).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compatible Implementations&lt;/strong&gt;: Implementations may only claim compatibility with a final specification.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EFSP Step-by-step (18).png&quot; class=&quot;alignnone size-full wp-image-5537&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/03/efsp-step-by-step-18.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As discussed earlier, there must exist at least one compatible implementation of a specification version under one of the designated open source licenses before it can be ratified as a final specification. Other compatible implementations may be created from the final specification and distributed under other licensing terms (as determined by respective vendors).&lt;/p&gt;
&lt;p&gt;The intellectual property rights required to build a compatible implementation flow from the final specification. That is, in order to be considered a compatible implementation and benefit from the intellectual property protections provided by the Eclipse Foundation Specification Agreement, an implementation must be based on a final specification. No claims regarding compatibility may be made for an implementation milestone build or unratified specification version.&lt;/p&gt;</description>
	<pubDate>Fri, 08 Mar 2019 13:52:51 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Board Election Results</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/AGnSilbZADg/20190305-boardelection.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/AGnSilbZADg/20190305-boardelection.php</link>
	<description>See the results of the Eclipse Foundation Sustaining Member and Committer Member elections for representatives to our Board of Directors.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/AGnSilbZADg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 06 Mar 2019 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The 2019 Jakarta EE Developer Survey is underway!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/JQv1iSBVyC8/2019-jakarta-ee-developer-survey-underway</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/JQv1iSBVyC8/2019-jakarta-ee-developer-survey-underway</link>
	<description>The Jakarta EE Working Group is launching the Jakarta EE Developer Survey for 2019!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/JQv1iSBVyC8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 05 Mar 2019 15:00:00 +0000</pubDate>
</item>
<item>
	<title>itemis: Xtext 2.17 – The Java 11 release</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-2-17-the-java-11-release</guid>
	<link>https://blogs.itemis.com/en/xtext-2-17-the-java-11-release</link>
	<description>&lt;p&gt;The Xtext team is proud to announce release version 2.17 of the famous Language Engineering framework. 16 individual contributors have fixed almost 100 issues and 250 pull requests with ~600 commits – and that’s just in 3 months! Xtext 2.17 participates in the Eclipse Simultaneous Release 2019-03 and is still one of the most active projects at Eclipse.&lt;/p&gt; 
&lt;h2&gt;Full Java 11 support&lt;/h2&gt; 
&lt;p&gt;Of course this release has a special focus on Java 11 support. With the previous version, we laid the foundation for Java 11. Full support was not possible at that time, because Xtext builds on top of various frameworks that themselves had to ship being fully enabled for Java 11 before, like Eclipse JDT, Eclipse Tycho, Eclipse EMF, Maven, Gradle, and any plugins used by them. That’s quite a bunch! But now we are happy to have them all together integrated and made ready ourselves to support the latest and greatest Java version.&lt;/p&gt; 
&lt;h2&gt;Upgrades, upgrades, upgrades&lt;/h2&gt; 
&lt;p&gt;We are constantly reviewing the technology stack Xtext builds upon. Everything has been updated to the latest release: Eclipse 2019-03, Gradle 5.2.1, Maven 3.6, EMF 2.15, Tycho 1.3, Eclipse MWE 2.10, ASM 7, JDT, Ace Editor 1.3.3, CodeMirror 5.41.0, Orion 17, and some more.&lt;/p&gt; 
&lt;h2&gt;Maven BOM&lt;/h2&gt; 
&lt;p&gt;For clients building Xtext-based applications the most noticeable change is a new artifact: A Maven &lt;em&gt;&lt;a href=&quot;https://www.javabullets.com/maven-bill-of-materialsbom/&quot;&gt;bill of materials&lt;/a&gt;&lt;/em&gt; (BOM). With help of the BOM, all third-party dependencies that Xtext relies on are managed in one central artifact. Clients do not have to care about specific versions of Eclipse Platform, EMF, Guava, etc. libraries. They just use the BOM for managing these dependencies.&lt;/p&gt; 
&lt;p&gt;The BOM can be used for Maven and Gradle builds natively. After declaring the usage of the BOM, dependencies can be used without specifying a version. All managed libraries have been tested to work with Xtext.&lt;/p&gt; 
&lt;h3&gt;Maven: Include BOM&lt;/h3&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;dependencyManagement&amp;gt;
  &amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.eclipse.xtext&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;xtext-dev-bom&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${xtext.version}&amp;lt;/version&amp;gt;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
    &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h3&gt;Maven: Use managed dependencies&lt;/h3&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;junit-jupiter-api&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
  &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h3&gt;Gradle: Include BOM&lt;/h3&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;dependencies {
  compile platform(&quot;org.eclipse.xtext:xtext-dev-bom:${xtextVersion}&quot;)
}&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h3&gt;Gradle: Use managed dependencies&lt;/h3&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;dependencies {
  testCompile 'org.junit.jupiter:junit-jupiter-api'
  testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}&lt;/pre&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;h2&gt;Some love for the Maven plugins&lt;/h2&gt; 
&lt;p&gt;We have polished all Maven plugins shipped with Xtext. Everything has been updated to the latest Maven API and refactored to use the &lt;a href=&quot;https://maven.apache.org/plugin-tools/maven-plugin-tools-annotations/index.html&quot;&gt;annotation API&lt;/a&gt; internally. All plugins used by the plugins themselves for the build have been updated to their latest recommended version. The usage of deprecated API has been resolved and changed to also use the recommended API now.&lt;/p&gt; 
&lt;p&gt;Also an internal but for us nonetheless important refactoring was cleaning up the plugins’ integration tests. The test cases have grown wildly over the time, and we also used here the new BOM and recommended patterns, e.g., proper plugin management and consolidation of common code in the integration tests’ parents. This helps us adding more relevant test cases, and it lowers maintenance costs.&lt;/p&gt; 
&lt;p&gt;The plugins benefit from BOM usage with a slight performance gain, so there's a positive effect on clients, too.&lt;/p&gt; 
&lt;h2&gt;JUnit 5 is now recommended&lt;/h2&gt; 
&lt;p&gt;Since its introduction with Xtext 2.14 (Eclipse Photon, June 2018), the new JUnit 5 support API has been kept a restricted API. Clients using these classes experienced access restriction warnings. We now felt that the API is stable enough to open it up as public API.&lt;/p&gt; 
&lt;p&gt;The &lt;em&gt;New Project Wizard&lt;/em&gt; will now default to JUnit 5 for selection of testing support.&lt;/p&gt; 
&lt;h2&gt;Xtend supports static member favorites&lt;/h2&gt; 
&lt;p&gt;A nice and maybe not well known feature of JDT is the definition of &lt;a href=&quot;https://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fpreferences%2Fjava%2Feditor%2Fref-preferences-content-assist-favorites.htm&quot;&gt;favorites for adding static imports&lt;/a&gt;. The types considered for importing static methods are configured for Java in &lt;em&gt;Java → Editor → Content Assist → Favorites&lt;/em&gt;.&lt;/p&gt; 
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;Xtext 2.17 Release: Static Member Favorites Preference Page&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Software%20Development/Xtext%202.17%20-%20The%20Java%2011%20Release/xtext-2.17-release-static-member-favorites-preference-page.png?width=600&amp;amp;name=xtext-2.17-release-static-member-favorites-preference-page.png&quot; style=&quot;width: 600px; display: block; margin: 0px auto;&quot; width=&quot;600&quot; /&gt;&lt;em&gt;Static member favorites preference page&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;Good news! Xtend does now also evaluates this preference and allows automatically adding static method imports by using its content assist facility. Try it out and use it (also in Java ;-) ).&lt;/p&gt; 
&lt;h2&gt;Good-bye Maven Android archetype &amp;amp; GWT library support&lt;/h2&gt; 
&lt;p&gt;It was time to clean up some more. Features that are typically no longer used anymore are the Maven archetype to create Android applications and the GWT support bundles &lt;em&gt;org.eclipse.xtend.lib.gwt&lt;/em&gt; and &lt;em&gt;org.eclipse.xtext.xbase.lib.gwt&lt;/em&gt;. Any objections? Then please get in touch with us and raise your voice! We will listen.&lt;/p&gt; 
&lt;h2&gt;Improved release speed&lt;/h2&gt; 
&lt;p&gt;With this release, we participated in all three milestones of the &lt;a href=&quot;https://wiki.eclipse.org/SimRel/2019-03/Simultaneous_Release_Plan&quot;&gt;Eclipse Simultaneous Release&lt;/a&gt; for the first time. Until now, it is still a surprisingly high effort to get a release shipped. We mainly struggle with flaky tests and the build infrastructure. Unfortunately, this hits us especially on release dates when builds are especially slow. We are not the only project on the machine that is doing release builds at this time.&lt;/p&gt; 
&lt;p&gt;Slowly our invests in the automation of creating release branches are paying off. With each milestone, the scripts were improved, and we are able to create release branches with a single click. In the best case, this means just waiting several hours for all the builds to complete. But as said, things do not always go smoothly, and failing UI tests (that worked totally fine on the master branch before) force us to retrigger builds, which take hours to complete again, and that several times. Our focus therefore in on making test execution more reliable.&lt;/p&gt; 
&lt;p&gt;We further plan to participate in the full Eclipse simultaneous release cycle, which means four releases each three months, i.e. three milestones and the final release.&lt;/p&gt; 
&lt;h2&gt;Behind the scenes&lt;/h2&gt; 
&lt;p&gt;Most of the work happens on code that is not visible to most users. Fixing bugs is always included, and we are fixing several of them with each release. Most of these bugs, users won’t even notice. Xtext can be considered rather stable and mature nowadays.&lt;/p&gt; 
&lt;p&gt;We have worked quite a lot on the implementation of UI tests, mainly to reduce the risk of flaky tests, which is, as mentioned above, still a sore point. Also, speeding up tests was in focus. The UI tests take the lion's share of our build time. And for each combination of project setup and build configuration the wizard can produce, we have added an integration test. Quite likely, we will dedicate a separate blog post to our testing efforts.&lt;/p&gt; 
&lt;p&gt;Major effort is also put into build and release engineering tasks. We are preparing to move the build infrastructure to the Common Build Infrastructure (CBI). With Xtext, we were one of the guinea pig projects for that infrastructure. We are still not fully done here and are still struggling with getting our builds, including UI tests, to run under CBI. In the past, the new infrastructure felt unstable like a Jenga tower built by 20 drunk teenagers. Nonetheless, the Eclipse CBI team is very responsive and helpful, and we are working together to get our builds to run reliably on CBI. Again, worth another blog post or more to share our experience.&lt;/p&gt; 
&lt;p&gt;Everything we need to build Xtext has been updated to its latest state (see “upgrades” section above), and we cleaned up the code base. The number of warnings and of usages of deprecated or restricted APIs has reached a new minimum.&lt;/p&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;p&gt;Xtext 2.17 and the technology stack below it is now supporting Java 11 completely. All third-party components have been lifted to their latest states, respectively. Besides that, the technical debt has been reduced by internal refactorings and revised UI tests. The new Maven BOM facilitates the dependency management for Maven and Gradle build configurations and reduces the risk of misconfiguration or build build problems. The release cadence is now fully in sync with the new Eclipse rolling releases.&lt;/p&gt; 
&lt;p&gt;Do you want to know more? Have a look at the &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2019/03/05/version-2-17-0&quot;&gt;release notes for Xtext&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.eclipse.org/xtend/releasenotes.html#/releasenotes/2019/03/05/version-2-17-0&quot;&gt;Xtend&lt;/a&gt;.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-2-17-the-java-11-release&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 04 Mar 2019 19:45:37 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>Eclipse Announcements: Jakarta EE - What's New in 2019?</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/E90K3ynkcSw/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/E90K3ynkcSw/</link>
	<description>Check out what's new in 2019 for Jakarta EE!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/E90K3ynkcSw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 04 Mar 2019 13:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.11.0.AM1 for Eclipse 2018-12</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.11.0.am1.html</guid>
	<link>https://tools.jboss.org/blog/4.11.0.am1.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.11.0.AM1 (Developer Milestone 1) build for Eclipse 2018-12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2018-12/4.11.0.AM1.html&quot;&gt;JBoss Tools 4.11.0 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.11.0.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eap-7-2-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eap-7-2-server-adapter&quot;&gt;&lt;/a&gt;EAP 7.2 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with EAP 7.2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;new-openshift-connection-helper&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-openshift-connection-helper&quot;&gt;&lt;/a&gt;New OpenShift connection helper&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you need to defined a new OpenShift connection, you need to provide the following information:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;cluster URL&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;username and password or token&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you’ve already logged in your cluster through the OpenShift Web Console, you can copy an &lt;code&gt;oc&lt;/code&gt; command
      in the clipboard that contains both the cluster URL and your token.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, from now, there is a new option that allows you to initialize the wizard fields from the copied &lt;code&gt;oc&lt;/code&gt;
      command:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;connection wizard paste&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/connection-wizard-paste.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Click on the &lt;code&gt;Paste Login Command&lt;/code&gt; button and the fields will be initialized:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;connection wizard paste1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/connection-wizard-paste1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Feb 2019 09:48:57 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: The Eclipse Foundation and GSoC 2019</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5513</guid>
	<link>https://waynebeaton.wordpress.com/2019/02/26/the-eclipse-foundation-and-gsoc-2019/</link>
	<description>&lt;p&gt;The Eclipse Foundation has been selected as a mentoring organization for Google Summer of Code 2019. This is our fourteenth year participating in this awesome programme that matches (and funds) post-secondary students with open source software projects for the summer term (in the northern hemisphere).&lt;/p&gt;
&lt;p&gt;Eclipse Committers: if you’re are interested in participating in the programme as mentors, please send a note to emo@eclipse.org to request an invitation. Candidates need to be existing committers on an Eclipse open source project. Please seed our list of potential student summer projects on our &lt;a href=&quot;https://wiki.eclipse.org/Google_Summer_of_Code_2019_Ideas&quot;&gt;GSoC 2019 Ideas page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Students: review our &lt;a href=&quot;https://wiki.eclipse.org/Google_Summer_of_Code_2019_Ideas&quot;&gt;ideas page&lt;/a&gt;, our list of &lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=UNCONFIRMED&amp;amp;bug_status=NEW&amp;amp;bug_status=ASSIGNED&amp;amp;bug_status=REOPENED&amp;amp;columnlist=product%2Ccomponent%2Cassigned_to%2Cbug_status%2Cresolution%2Cshort_desc%2Cchangeddate&amp;amp;keywords=helpwanted%2C%20&amp;amp;keywords_type=allwords&amp;amp;list_id=18226770&amp;amp;query_format=advanced&quot;&gt;“help wanted” issues&lt;/a&gt;, and the issue trackers for our Eclipse &lt;a href=&quot;https://projects.eclipse.org/&quot;&gt;open source projects&lt;/a&gt;. Please note that we will only accept projects that have direct relevance with one of our projects (be sure to cite the name of the relevant Eclipse open source project(s) in your proposal). Use the &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC website&lt;/a&gt; to register your project idea with us. Keep in mind that our good friends at Google strictly enforce the deadlines indicated in the &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/#timeline&quot;&gt;timeline&lt;/a&gt;. The &lt;em&gt;Student Application Period&lt;/em&gt; starts on March 25, 2019 and ends on April 9, 2019. Use the time between now and March 25 to research ideas and connect with our project teams.&lt;/p&gt;
&lt;p&gt;Mentors and students: please subscribe to the &lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/soc-dev&quot;&gt;soc-dev@eclipse.org mailing list&lt;/a&gt;. We will use this list for all communication related to the programme. Use this channel to ask questions about the programme or get pointers to project-specific channels.&lt;/p&gt;</description>
	<pubDate>Wed, 27 Feb 2019 04:54:13 +0000</pubDate>
</item>
<item>
	<title>EclipseCon Europe 2018: Save for Dates for 2019!</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/news/1797 at https://www.eclipsecon.org</guid>
	<link>https://www.eclipsecon.org/europe2018/news/save-dates-2019</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Mark your calendar for EclipseCon Europe 2019!&lt;/p&gt;

&lt;p&gt;October 21: Community Day
October 22 - 24: Conference
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 27 Feb 2019 00:43:29 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse IoT Reaches New Milestones in Open Source IoT Leadership</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/WAqnnUaJYbg/Eclipse-IoT-Reaches-New-Milestones-in-Open-Source-IoT-Leadership.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/WAqnnUaJYbg/Eclipse-IoT-Reaches-New-Milestones-in-Open-Source-IoT-Leadership.html</link>
	<description>Eclipse IoT reaches three million lines of code, 41 member companies, 37 IoT projects, and 350 contributors - bringing IoT leaders together to standardize open architecture.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/WAqnnUaJYbg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 26 Feb 2019 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: RESTful OSGi R7 Remote Services with Jersey 2.28 or Apache CXF 3.3</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-2851763688882513257</guid>
	<link>http://eclipseecf.blogspot.com/2019/02/restful-osgi-r7-remote-services-with.html</link>
	<description>For some time, &lt;a href=&quot;http://wiki.eclipse.org/&quot;&gt;ECF&lt;/a&gt; has had &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;remote service distribution providers&lt;/a&gt; that use the &lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;Jersey or the CXF implementation&lt;/a&gt; of standard Java API for RESTful Web Services (JaxRS).  &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;These distribution providers&lt;/a&gt; allow &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services&lt;/a&gt; to be defined via JaxRS annotations and implemented by either &lt;a href=&quot;https://projects.eclipse.org/projects/ee4j.jersey&quot;&gt;Jersey 2.28&lt;/a&gt; or &lt;a href=&quot;http://cxf.apache.org/&quot;&gt;CXF 3.3&lt;/a&gt;.  &lt;br /&gt;&lt;br /&gt;OSGi R7 Remote Services provides support for renite service discovery, dynamics, versioning, configuration and extension of the distribution providers, and asynchronous remote calls as well as other features of the &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services&lt;/a&gt; and &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteserviceadmin.html&quot;&gt;Remote Service Admin&lt;/a&gt; specs.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf&quot;&gt;This tutorial&lt;/a&gt; shows the use of &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi Remote Services&lt;/a&gt; with these &lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;JaxRS distribution providers&lt;/a&gt; on &lt;a href=&quot;http://karaf.apache.org/&quot;&gt;Apache Karaf&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;There is also a new version of the &lt;a href=&quot;https://wiki.eclipse.org/Bndtools_Support_for_Remote_Services_Development&quot;&gt;ECF Bndtools workspace template&lt;/a&gt; with example &lt;a href=&quot;https://bndtools.org/&quot;&gt;Bndtools&lt;/a&gt; projects showing the use of these distribution providers to define, configure, run and deploy RESTful OSGi R7 Remote Services with B&lt;a href=&quot;https://bndtools.org/&quot;&gt;ndtools&lt;/a&gt; 4.2+.</description>
	<pubDate>Tue, 26 Feb 2019 07:39:53 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>

</channel>
</rss>
